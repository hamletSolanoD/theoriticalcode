generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]

  createdMachines  AbstractMachine[]         @relation("CreatedMachines")
  machineAccess    UserOnAbstractMachine[]
  createdSnapshots AbstractMachineSnapshot[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ============================================
// ENUMS
// ============================================

enum MachineType {
  TURING
  AFD
  AFND
  PDA
}

enum UserMachineRole {
  OWNER
  EDITOR
  VIEWER
}

// ============================================
// MODELOS PARA ABSTRACT MACHINES
// ============================================

model AbstractMachine {
  id          String      @id @default(cuid())
  name        String
  description String?     @db.Text
  type        MachineType

  yjsState Bytes

  version    Int     @default(1)
  isArchived Boolean @default(false)

  owners    UserOnAbstractMachine[]
  snapshots AbstractMachineSnapshot[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation("CreatedMachines", fields: [createdById], references: [id])

  @@index([type])
  @@index([createdById])
  @@index([updatedAt])
  @@index([isArchived, updatedAt])
}

model UserOnAbstractMachine {
  userId            String
  abstractMachineId String
  role              UserMachineRole @default(EDITOR)

  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  abstractMachine AbstractMachine @relation(fields: [abstractMachineId], references: [id], onDelete: Cascade)

  addedAt DateTime @default(now())

  @@id([userId, abstractMachineId])
  @@index([abstractMachineId])
}

model AbstractMachineSnapshot {
  id                String          @id @default(cuid())
  abstractMachineId String
  abstractMachine   AbstractMachine @relation(fields: [abstractMachineId], references: [id], onDelete: Cascade)

  yjsSnapshot Bytes

  name        String?
  description String? @db.Text
  version     Int

  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdAt   DateTime @default(now())

  @@index([abstractMachineId, createdAt(sort: Desc)])
  @@index([abstractMachineId, version])
}
